{"ast":null,"code":"import _slicedToArray from \"/Users/ndjeteli/Documents/my-lab-4-4/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ndjeteli/Documents/my-lab-4-4/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from './Components/Nav/Nav';\nimport Body from './Components/Body/Body';\nimport Footer from './Components/Footer/Footer';\n\nfunction App() {\n  const _useState = useState([{\n    id: 0,\n    firstName: 'NIK',\n    lastName: 'DJETELI',\n    age: '28',\n    updateMode: false\n  }, {\n    id: 1,\n    firstName: 'Derick',\n    lastName: 'Rose',\n    age: '38',\n    updateMode: false\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        contactData = _useState2[0],\n        setContactData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newContactData = _useState4[0],\n        setNewContactData = _useState4[1];\n\n  const _useState5 = useState([{\n    message: '',\n    type: 0,\n    // 0 - Error , 1 - Success\n    display: false // true - visible , false - hide\n\n  }]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        messageStatus = _useState6[0],\n        setMessageStatus = _useState6[1]; // Handle input changes in the form. \n\n\n  const handleInputEvent = event => {\n    event.preventDefault();\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    const id = target.id;\n    const newData = contactData.map(el => {\n      if (name.toString() === 'firstName' && el.id === parseInt(id)) {\n        el.firstName = value;\n      } else {\n        if (name.toString() === 'lastName' && el.id === parseInt(id)) {\n          el.lastName = value;\n        } else {\n          if (name.toString() === 'age' && el.id === parseInt(id)) {\n            el.age = value;\n          }\n        }\n      }\n\n      return el;\n    });\n    setContactData(newData);\n  }; // Handle input changes in the form. \n\n\n  const handleInputEventNew = event => {\n    event.preventDefault();\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    const id = target.id;\n    const newData = newContactData.map(el => {\n      if (name.toString() === 'firstName' && el.id === parseInt(id)) {\n        el.firstName = value;\n      } else {\n        if (name.toString() === 'lastName' && el.id === parseInt(id)) {\n          el.lastName = value;\n        } else {\n          if (name.toString() === 'age' && el.id === parseInt(id)) {\n            el.age = value;\n          }\n        }\n      }\n\n      return el;\n    });\n    setNewContactData(newData);\n  };\n\n  const editContact = id => {\n    const newData = contactData.map(el => {\n      if (el.id === parseInt(id)) {\n        el.updateMode = true;\n      }\n\n      return el;\n    });\n    setContactData(newData);\n  };\n\n  const deleteContact = id => {\n    const newData = contactData.filter(el => {\n      return el.id !== parseInt(id);\n    });\n    setContactData(newData);\n  };\n\n  const saveContact = id => {\n    const data = contactData.filter(el => {\n      return el.id === parseInt(id);\n    });\n\n    if (validateForm(data) === 1) {\n      const newData = contactData.map(el => {\n        if (el.id === parseInt(id)) {\n          el.updateMode = false;\n        }\n\n        return el;\n      });\n      setContactData(newData); // Success message\n\n      const prepData = [{\n        message: 'Your contact have been successfully saved',\n        type: 1,\n        // 0 - Error , 1 - Success\n        display: true\n      }];\n      setMessageStatus([...prepData]);\n    }\n  };\n\n  const saveNewContact = id => {\n    const data = newContactData.filter(el => {\n      return el.id === parseInt(id);\n    });\n\n    if (validateForm(data) === 1) {\n      // add element in the main data;\n      const newData1 = newContactData.filter(el => {\n        if (el.id === id) {\n          el.updateMode = false;\n          return el;\n        }\n      });\n      const newData = [...contactData, ...newData1]; // remove that element from the arry since add operation is complete.\n\n      const newData2 = newContactData.filter(el => {\n        return el.id !== id;\n      });\n      setContactData(newData);\n      setNewContactData(newData2);\n    }\n  };\n\n  const addNewContact = () => {\n    const id = newContactData.length === 0 ? contactData.length + 1 : newContactData[newContactData.length - 1].id + 1;\n    const data = [{\n      id: id,\n      firstName: '',\n      lastName: '',\n      age: '',\n      updateMode: true\n    }];\n    let result = [...newContactData, ...data];\n    setNewContactData(result);\n  };\n\n  const validateForm = data => {\n    let isfieldsEmpty = false,\n        isFirstNameValid = true,\n        isLastNameValid = true,\n        isAgeValid = true; // Check if form is not empty\n\n    if (data[0].firstName === '' || data[0].lastName === '' || data[0].age === '') {\n      isfieldsEmpty = true;\n      const prepData = [{\n        message: 'Some / All the fields are empty',\n        type: 0,\n        // 0 - Error , 1 - Success\n        display: true\n      }];\n      setMessageStatus([...prepData]);\n    } // First name must be <= 45 characters\n\n\n    if (isfieldsEmpty === false && data[0].firstName.length > 45) {\n      isFirstNameValid = false;\n      const prepData = [{\n        message: 'First Name length must be less than 45 Characters',\n        type: 0,\n        // 0 - Error , 1 - Success\n        display: true\n      }];\n      setMessageStatus([...prepData]);\n    } // Last name must be <= 45 characters\n\n\n    if (isfieldsEmpty === false && isFirstNameValid === true && data[0].lastName.length > 45) {\n      isLastNameValid = false;\n      const prepData = [{\n        message: 'Last Name length must be less than 45',\n        type: 0,\n        // 0 - Error , 1 - Success\n        display: true\n      }];\n      setMessageStatus([...prepData]);\n    } // Age must be numeric\n\n\n    if (isfieldsEmpty === false && isFirstNameValid === true && isLastNameValid === true && isNaN(parseInt(data[0].age)) === true) {\n      isAgeValid = false;\n      const prepData = [{\n        message: 'Age fields must be numeric',\n        type: 0,\n        // 0 - Error , 1 - Success\n        display: true\n      }];\n      setMessageStatus([...prepData]);\n    } // Final check\n\n\n    if (isfieldsEmpty === false && isFirstNameValid === true && isLastNameValid === true && isAgeValid === true) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }), React.createElement(Body, {\n    contactData: contactData,\n    editContact: editContact,\n    deleteContact: deleteContact,\n    saveContact: saveContact,\n    saveNewContact: saveNewContact,\n    newContactData: newContactData,\n    addNewContact: addNewContact,\n    handleInputEventNew: handleInputEventNew,\n    handleInputEvent: handleInputEvent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ndjeteli/Documents/my-lab-4-4/src/App.js"],"names":["React","useState","Nav","Body","Footer","App","id","firstName","lastName","age","updateMode","contactData","setContactData","newContactData","setNewContactData","message","type","display","messageStatus","setMessageStatus","handleInputEvent","event","preventDefault","target","name","value","newData","map","el","toString","parseInt","handleInputEventNew","editContact","deleteContact","filter","saveContact","data","validateForm","prepData","saveNewContact","newData1","newData2","addNewContact","length","result","isfieldsEmpty","isFirstNameValid","isLastNameValid","isAgeValid","isNaN"],"mappings":"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","sourcesContent":["import React , {useState} from 'react';\nimport './App.css';\nimport Nav from './Components/Nav/Nav';\nimport Body from './Components/Body/Body';\nimport Footer from './Components/Footer/Footer';\n\nfunction App() {\n  const [contactData, setContactData] = useState([\n    {\n      id: 0,\n      firstName: 'NIK',\n      lastName: 'DJETELI',\n      age: '28',\n      updateMode: false\n    },\n    {\n      id: 1,\n      firstName: 'Derick',\n      lastName: 'Rose',\n      age: '38',\n      updateMode: false\n    }\n  ]);\n\n  const [newContactData , setNewContactData] = useState([ ]);\n\n  const [messageStatus , setMessageStatus] = useState([ \n    {\n      message: '',\n      type: 0, // 0 - Error , 1 - Success\n      display: false // true - visible , false - hide\n    },\n  ]);\n\n  // Handle input changes in the form. \n  const handleInputEvent = (event) => {\n    event.preventDefault()\n    const target  = event.target;\n    const name = target.name;\n    const value = target.value;\n    const id = target.id;\n    const newData = contactData.map( (el) => {\n      if ( name.toString() === 'firstName' && el.id === parseInt(id) ) { \n        el.firstName = value; \n      } else { \n        if ( name.toString() === 'lastName'  && el.id === parseInt(id)) { \n          el.lastName = value; \n        } else { \n          if ( name.toString() === 'age' && el.id === parseInt(id) ) {\n            el.age = value; \n          } \n        }\n      }\n      return el;\n    });\n    setContactData(newData);\n  };\n\n  // Handle input changes in the form. \n  const handleInputEventNew = (event) => {\n    event.preventDefault();\n    const target  = event.target;\n    const name = target.name;\n    const value = target.value;\n    const id = target.id;\n    const newData = newContactData.map( (el) => {\n      if ( name.toString() === 'firstName' && el.id === parseInt(id) ) { \n        el.firstName = value; \n      } else { \n        if ( name.toString() === 'lastName'  && el.id === parseInt(id)) { \n          el.lastName = value; \n        } else { \n          if ( name.toString() === 'age' && el.id === parseInt(id) ) {\n            el.age = value; \n          } \n        }\n      }\n      return el;\n    });\n    setNewContactData(newData);\n  };\n\n  const editContact = ( id ) => {\n    const newData = contactData.map( (el) => {\n      if ( el.id === parseInt(id) ) { \n        el.updateMode = true; \n      } \n      return el;\n    });\n    setContactData(newData);\n  };\n\n  const deleteContact = ( id ) => {\n    const newData = contactData.filter( (el) => {\n      return ( el.id !== parseInt(id) );\n    });\n    setContactData(newData);\n  };\n\n  const saveContact = ( id ) => {\n    const data = contactData.filter( el => {\n      return el.id === parseInt(id);\n    });\n   if ( validateForm(data) === 1 ) {\n      const newData = contactData.map( (el) => {\n        if ( el.id === parseInt(id) ) { \n          el.updateMode = false; \n        } \n        return el;\n      });\n      setContactData(newData);\n      // Success message\n      const prepData = [{\n        message: 'Your contact have been successfully saved',\n        type: 1, // 0 - Error , 1 - Success\n        display: true\n      }];\n      setMessageStatus([...prepData]);\n   } \n  };\n\n  const saveNewContact = ( id ) => {\n    const data = newContactData.filter( el => {\n      return el.id === parseInt(id);\n    });\n    if ( validateForm(data) === 1 ) {\n      // add element in the main data;\n      const newData1 = newContactData.filter( (el) =>{\n        if (el.id === id ) { \n          el.updateMode = false;\n          return el; \n        }\n      });\n      const newData = [...contactData,...newData1];\n      // remove that element from the arry since add operation is complete.\n      const newData2 = newContactData.filter( (el) =>{\n          return (el.id !== id );\n      });\n      setContactData(newData);\n      setNewContactData(newData2);\n    }\n  };\n\n  const addNewContact = () => {\n    const id = newContactData.length === 0 ? (contactData.length+1):\n               (newContactData[newContactData.length-1].id + 1);\n    const data = [{\n      id: id,\n      firstName: '',\n      lastName: '',\n      age: '',\n      updateMode: true\n    }];\n    let result = [...newContactData,...data];\n    setNewContactData(result);\n  }\n\n  const validateForm = (data) => {\n    let isfieldsEmpty= false, isFirstNameValid=true , isLastNameValid=true, isAgeValid=true;\n    // Check if form is not empty\n    if (data[0].firstName === '' ||\n        data[0].lastName === ''  ||\n        data[0].age === '' ) {\n        isfieldsEmpty = true;\n        const prepData = [{\n          message: 'Some / All the fields are empty',\n          type: 0, // 0 - Error , 1 - Success\n          display: true\n        }];\n        setMessageStatus([...prepData]);\n    } \n\n    // First name must be <= 45 characters\n    if ( isfieldsEmpty === false && \n         data[0].firstName.length > 45 ) {\n      isFirstNameValid=false;\n      const prepData = [{\n        message: 'First Name length must be less than 45 Characters',\n        type: 0, // 0 - Error , 1 - Success\n        display: true\n      }];\n      setMessageStatus([...prepData]);\n    }\n\n    // Last name must be <= 45 characters\n    if ( isfieldsEmpty === false   && \n         isFirstNameValid === true && \n         data[0].lastName.length > 45 ) {\n      isLastNameValid=false;\n      const prepData = [{\n        message: 'Last Name length must be less than 45',\n        type: 0, // 0 - Error , 1 - Success\n        display: true\n      }];\n      setMessageStatus([...prepData]);\n    } \n\n    // Age must be numeric\n    if ( isfieldsEmpty === false   && \n         isFirstNameValid === true && \n         isLastNameValid === true  && \n         isNaN(parseInt(data[0].age)) === true ) {\n      isAgeValid = false;\n      const prepData = [{\n        message: 'Age fields must be numeric',\n        type: 0, // 0 - Error , 1 - Success\n        display: true\n      }];\n      setMessageStatus([...prepData]);\n    } \n    \n    // Final check\n    if ( isfieldsEmpty === false   &&\n         isFirstNameValid === true &&\n         isLastNameValid === true  && \n         isAgeValid === true ) {\n      return 1;\n    } else { return 0; }\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav></Nav>\n      <Body contactData={ contactData }  \n            editContact={ editContact }\n            deleteContact={ deleteContact }\n            saveContact={ saveContact }\n            saveNewContact={ saveNewContact }\n            newContactData={ newContactData }\n            addNewContact={ addNewContact }\n            handleInputEventNew={ handleInputEventNew }\n            handleInputEvent={ handleInputEvent } >\n      </Body>\n      <Footer></Footer>\n    </div>\n  );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}